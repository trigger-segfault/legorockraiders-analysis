{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Lego.cfg Script",
  "firstLineMatch": ";;;;;;;;;;;;;;;;;;;;;;;;;;;; MAIN LEGO CONFIG FILE ;;;;;;;;;;;;;;;;;;;;;;;;",
  "fileTypes": [
    "cfg",
    "ol",
    "ptl",
    "ae"
  ],
  "foldingStartMarker": "^\\s*([^\\s\\{\\;]+\\s*)?\\{",
  "foldingStopMarker": "^\\s*\\}",
  "scopeName": "source.lrr.lego-cfg",
  "patterns": [
    {
      "include": "#comments"
    },{
      "include": "#block_punctuation"
    },{
      "include": "#block"
    },{
      "include": "#property-rgb"
    },{
      "include": "#property"
    }
  ],
  "repository": {
    "_info_": {
      "comment": "https://kb.rockraidersunited.com/Config_documentation"
    },
    "constants": {
      "match": "(?i)(?<=[\\s\\|\\:\\,]|^)(TRUE|YES|ON|FALSE|NO|OFF|NULL|SFX_NULL|ITEM_NULL)(?=[\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": { "name": "constant.language.true.true" },
        "2": { "name": "constant.language.true.yes" },
        "3": { "name": "constant.language.true.on" },
        "4": { "name": "constant.language.false.false" },
        "5": { "name": "constant.language.false.no" },
        "6": { "name": "constant.language.false.off" },
        "7": { "name": "constant.language.null" },
        "8": { "name": "constant.language.null.sfx" },
        "9": { "name": "constant.language.null.item" }
      }
    },
    "block": {
      "comment": "SPACE IS REQUIRED between block name and open brace",
      "match": "^\\s*([^\\s\\;]{2,}|[^\\s\\;\\{\\}])(?=\\s+\\{|\\s*(?:;|$))",
      "captures": {
        "1": {
          "name": "entity.name.namespace",
          "patterns": [
            {
              "match": ".*[\\{\\}].*",
              "name": "invalid.entity.name.namespace"
            },
            {
              "match": "(\\*).*",
              "name": "keyword.other.wildcard"
            }
          ]
        }
      }
    },
    "block_punctuation": {
      "match": "(?<=\\s|^)(\\{)|(\\})(?=[\\s\\;]|$)",
      "captures": {
        "1": { "name": "punctuation.section.block.begin.bracket.curly" },
        "2": { "name": "punctuation.section.block.end.bracket.curly" }
      }
    },
    "delimiter_punctuation": {
      "match": "(?<!:)(:)(?!:)|(,)|(\\|)",
      "captures": {
        "1": { "name": "punctuation.separator.delimiter.colon" },
        "2": { "name": "punctuation.separator.delimiter.comma" },
        "3": { "name": "punctuation.separator.delimiter.pipe" }
      }
    },
    "punctuation_old": {
      "match": "(?<!:)(:)(?!:)|(,)|(\\|)|(\\{)|(\\})",
      "captures": {
        "1": { "name": "punctuation.separator.delimiter.colon" },
        "2": { "name": "punctuation.separator.delimiter.comma" },
        "3": { "name": "punctuation.separator.delimiter.pipe" },
        "4": { "name": "punctuation.section.block.begin.bracket.curly" },
        "5": { "name": "punctuation.section.block.end.bracket.curly" }
      }
    },
    "namespace": {
      "comment": "Referenced names, such as `Levels::Level01`",
      "match": "(([^\\s\\|\\:\\,]+)(::))(?=[^\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": { "name": "meta.namespace.value" },
        "2": { "name": "entity.name.namespace" },
        "3": { "name": "punctuation.separator.namespace" }
      }
    },
    "namespace_old": {
      "comment": "Referenced names, such as `Levels::Level01`",
      "match": "(?<=[\\s\\{\\}\\|\\:\\,]|^)(([^\\s\\{\\}\\|\\:\\,]+)(::))(?=[^\\s\\{\\}\\|\\:\\,\\;]|$)",
      "captures": {
        "1": { "name": "meta.namespace.value" },
        "2": { "name": "entity.name.namespace" },
        "3": { "name": "punctuation.separator.namespace" }
      }
    },
    "key_prefix": {
      "comment": "This only contains hardcoded prefix names for Dependencies block (AlwaysCheck isn't a 'real' prefix, but is the standard)",
      "match": "(?i)(?<=[\\s\\|\\:\\,]|^)((AlwaysCheck)|(HitOnceStay))(:)",
      "captures": {
        "1": { "name": "meta.entity.name.prefix" },
        "2": { "name": "entity.name.function.dependency.always" },
        "3": { "name": "entity.name.function.dependency.once" },
        "4": { "patterns": [ { "include": "#delimiter_punctuation" } ] }
      }
    },
    "value_prefix": {
      "patterns": [
        {
          "comment": "old: (?<=[\\s\\|\\:\\,]|^)(\\*)?(#([+\\-]?[0-9]+)#)?(@)?(?![\\s\\|\\:\\,\\;]|$)",
          "match": "(?<=[\\s\\|\\:\\,]|^)(?=[\\*#@])(\\*)?(#([+\\-]?[0-9]+)#|(#(?:[^\\s\\|\\:\\,\\;]*#|[^\\s\\|\\:\\,\\;]*)))?(@)?",
          "captures": {
            "1": { "name": "keyword.other.operator.sound.multiple" },
            "2": { "name": "keyword.other.operator.sound.volume" },
            "3": { "name": "keyword.other.operator.sound.volume.number" },
            "4": { "name": "invalid.keyword.other.operator.sound.volume" },
            "5": { "name": "keyword.other.operator.sound.streamed keyword.other.operator.tooltip.image" }
          }
        },
        {
          "comment": "Interface menuitem types",
          "match": "(?i)(?<=[\\s\\|\\:\\,]|^)(Cycle|TextInput|Trigger|Next|Slider|RealSlider)(?=$)",
          "captures": {
            "1": { "name": "entity.name.class.menuitem.type" }
          }
        }
      ]
    },
    "property-rgb": {
      "comment": "A fancy handling for properties with RGB, (not exactly useful at the moment)",
      "match": "(?i)^\\s*((!)?([^\\s\\;]+RGB))\\s+([0-9]{1,3}:[0-9]{1,3}:[0-9]{1,3})(?=[\\s\\;]|$)",
      "captures": {
        "1": {
          "name": "meta.property.key.rgb"
        },
        "2": { "name": "keyword.other.operator.reduce" },
        "3": {
          "patterns": [
            { "include": "#namespace" },
            {
              "name": "entity.name.variable.rgb",
              "match": "([^\\s\\|\\:\\,\\;]+)(?!\\:\\:)"
            }
          ]
        },
        "4": {
          "name": "constant.other.rgb-value",
          "patterns": [
            { "include": "#comments" },
            { "include": "#value_prefix" },
            { "include": "#constants" },
            { "include": "#numbers" },
            { "include": "#paths" },
            { "include": "#references" },
            { "include": "#strings" },
            { "include": "#delimiter_punctuation" }
          ]
        }
      }
    },
    "property": {
      "comment": "Standard key/value property matching (on a single line)",
      "match": "^\\s*((!)?([^\\s\\;]+))\\s+([^\\s\\;]+)(?=[\\s\\;]|$)",
      "captures": {
        "1": {
          "name": "meta.property.key"
        },
        "2": { "name": "keyword.other.operator.reduce" },
        "3": {
          "patterns": [
            { "include": "#key_prefix" },
            { "include": "#namespace" },
            {
              "name": "entity.name.variable",
              "match": "([^\\s\\|\\:\\,\\;]+)(?!\\:\\:)"
            }
          ]
        },
        "4": {
          "name": "meta.property.value",
          "patterns": [
            { "include": "#comments" },
            { "include": "#constants" },
            { "include": "#numbers" },
            { "include": "#paths" },
            { "include": "#references" },
            { "include": "#strings" },
            { "include": "#delimiter_punctuation" }
          ]
        }
      }
    },
    "references": {
      "comment": "match old: (?<=\\W|^)(?=.*\\:\\:)([!@\\*])?((?:[^\\s\\{\\}\\|\\:\\,\\;]|\\:\\:)+)(?=[\\s\\{\\}\\|\\:\\,]|\\:[^\\s\\{\\}\\|\\:\\,]|$)",
      "name": "meta.property.string.reference",
      "match": "(?<=[\\s\\|\\:\\,]|[\\s\\|\\:\\,]|^)(?=[^\\s\\|\\:\\,\\;]*\\:\\:)((?:[^\\s\\|\\:\\,\\;]|\\:\\:)+)(?=[\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": {
          "patterns": [
            { "include": "#value_prefix" },
            { "include": "#namespace" },
            {
              "name": "variable.other.enummember.reference",
              "match": "([^\\s\\|\\:\\,\\;]+)(?!\\:\\:)"
            },
            { "include": "#printf-formatting" }
          ]
        }
      }
    },
    "paths": {
      "name": "meta.property.string.path",
      "match": "(?<=[\\s\\|\\:\\,]|^)(?=[^\\s\\|\\:\\,\\;]*\\\\)([^\\s\\|\\:\\,\\;]+)(?=[\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": {
          "name": "string.unquoted.path",
          "patterns": [
            { "include": "#value_prefix" },
            { "include": "#printf-formatting" }
          ]
        }
      }
    },
    "strings": {
      "comment": "meta.property.string.value",
      "match": "(?<=[\\s\\|\\:\\,]|^)([^\\s\\|\\:\\,\\;]+)(?=[\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": {
          "name": "string.unquoted.value",
          "patterns": [
            { "include": "#value_prefix" },
            {
              "name": "constant.character.escape.space",
              "match": "_"
            },
            { "include": "#printf-formatting" }
          ]
        }
      }
    },
    "strings_old": {
      "name": "string.unquoted",
      "match": "(?<=\\W|^)(([!@\\*])?([^\\s\\{\\}\\|\\:\\,\\;]+))(?=[\\s\\{\\}\\|\\:\\,]|$)",
      "captures": {
        "1": { "name": "meta.property.string.value" },
        "2": { "name": "keyword.other.operator" },
        "3": {
          "name": "string.unquoted",
          "patterns": [
            { "include": "#namespace" }
          ]
        }
      }
    },
    "references_old": {
      "name": "meta.reference.value",
      "match": "(?<=\\W|^)(([!@\\*])?((?:[^\\s\\{\\}\\|\\:\\,\\;]|\\:\\:)+))(?=[\\s\\;]|$)",
      "captures": {
        "1": { "name": "meta.property.string.value" },
        "2": { "name": "keyword.other.operator" },
        "3": {
          "name": "string.unquoted",
          "patterns": [
            { "include": "#namespace" }
          ]
        }
      }
    },
    "property_old": {
      "comment": "",
      "match": "^\\s*(([!@\\*])?[^\\s\\{\\};]+)\\s+([^\\s\\{\\};]+)(?:\\s*(?:((?:;|\\/\\/).*$)|$))",
      "captures": {
        "1": { "name": "entity.name.variable" },
        "2": { "name": "keyword.other.operator" },
        "3": {"patterns": [
          { "include": "#comments" },
          { "include": "#constants" },
          { "include": "#numbers" },
          { "include": "#strings" }
        ]},
        "4": { "patterns": [ { "include": "#comments" } ]}
      }
    },

    "comments": {
      "comment": "Line comments: '//' ';' (no line-continuation)",
      "patterns": [
        {
          "comment": "CFG ; line comments  (no line-continuation)",
          "begin": "(^[ \\t]+)?(?=;)",
          "end": "(?!\\G)",
          "beginCaptures": {
            "1": { "name": "punctuation.whitespace.comment.leading" }
          },
          "patterns": [ {
              "name": "comment.line.semicolon",
              "begin": ";",
              "end": "\\n",
              "beginCaptures": {
                "0": { "name": "punctuation.definition.comment.semicolon" }
              }
          } ]
        },
        {
          "comment": "ILLEGAL: C // line comments  (no line-continuation)",
          "begin": "(^[ \\t]+)?(?=\\/\\/)",
          "end": "(?!\\G)",
          "patterns": [ {
              "name": "invalid.comment.line.double-slash",
              "begin": "\\/\\/",
              "end": "\\n",
              "beginCaptures": {
                "0": { "name": "invalid.punctuation.definition.comment.double-slash" }
              }
          } ]
        }
      ]
    },
		"printf-formatting": {
			"name": "meta.format.percent.python",
			"match": "(%[diouxXeEfFgGcrsab])|(%%)",
			"captures": {
				"1": { "name": "constant.character.format.placeholder.other" },
				"2": { "name": "constant.character.format.escape" }
			}
		},
    "numbers": {
      "match": "(?<=[\\s\\|\\:\\,]|^)(?:([+\\-]?[0-9]+)|([+\\-]?[0-9]*)(\\.)([0-9]+))([fF])?(?=[\\s\\|\\:\\,\\;]|$)",
      "captures": {
        "1": { "name": "constant.numeric.decimal" },
        "2": { "name": "constant.numeric.decimal" },
        "3": { "name": "constant.numeric.decimal.point" },
        "4": { "name": "constant.numeric.decimal" },
        "5": { "name": "keyword.other.unit.suffix.floating-point" }
      }
    },


    "numbers_old": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G(?:0[xX]))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.c"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.hexadecimal.c"
										},
										"5": {
											"name": "constant.numeric.hexadecimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.hexadecimal.c"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.hexadecimal.c"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.hexadecimal.c"
										},
										"11": {
											"name": "constant.numeric.exponent.hexadecimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.c"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!(?:0[xXbB])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.decimal.point.c"
										},
										"5": {
											"name": "constant.numeric.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.decimal.c"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.decimal.c"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.decimal.c"
										},
										"11": {
											"name": "constant.numeric.exponent.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.c"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.binary.c"
										},
										"2": {
											"name": "constant.numeric.binary.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.c"
										}
									}
								},
								{
									"match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.octal.c"
										},
										"2": {
											"name": "constant.numeric.octal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.c"
										}
									}
								},
								{
									"match": "(\\G(?:0[xX]))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.c"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.hexadecimal.c"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.hexadecimal.c"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.hexadecimal.c"
										},
										"8": {
											"name": "constant.numeric.exponent.hexadecimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.c"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!(?:0[xXbB])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.decimal.c"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.decimal.c"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.decimal.c"
										},
										"8": {
											"name": "constant.numeric.exponent.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.c"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
    }
  }
}
